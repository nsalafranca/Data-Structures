	.section	__TEXT,__text,regular,pure_instructions
	.macosx_version_min 10, 12
	.intel_syntax noprefix
	.globl	_main
	.align	4, 0x90
_main:                                  ## @main
Lfunc_begin0:
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
	.cfi_lsda 16, Lexception0
## BB#0:
	push	rbp
Ltmp13:
	.cfi_def_cfa_offset 16
Ltmp14:
	.cfi_offset rbp, -16
	mov	rbp, rsp
Ltmp15:
	.cfi_def_cfa_register rbp
	sub	rsp, 64
	lea	rdi, [rbp - 8]
	call	__ZN7StudentC1Ev
	lea	rdi, [rbp - 16]
	call	__ZN8EngineerC1Ev
Ltmp0:
	mov	eax, 8
	mov	edi, eax
	call	__Znwm
Ltmp1:
	mov	qword ptr [rbp - 48], rax ## 8-byte Spill
	jmp	LBB0_1
LBB0_1:
	mov	rax, qword ptr [rbp - 48] ## 8-byte Reload
	mov	qword ptr [rax], 0
	mov	rdi, rax
	call	__ZN8EngineerC1Ev
	mov	rax, qword ptr [rbp - 48] ## 8-byte Reload
	mov	qword ptr [rbp - 24], rax
	mov	rdi, qword ptr [rax]
	mov	rdi, qword ptr [rdi]
Ltmp2:
	mov	qword ptr [rbp - 56], rdi ## 8-byte Spill
	mov	rdi, rax
	mov	rcx, qword ptr [rbp - 56] ## 8-byte Reload
	call	rcx
Ltmp3:
	jmp	LBB0_2
LBB0_2:
Ltmp7:
	lea	rdi, [rbp - 16]
	call	__ZN8EngineerD1Ev
Ltmp8:
	jmp	LBB0_3
LBB0_3:
	lea	rdi, [rbp - 8]
	call	__ZN7StudentD1Ev
	xor	eax, eax
	add	rsp, 64
	pop	rbp
	ret
LBB0_4:
Ltmp4:
	mov	ecx, edx
	mov	qword ptr [rbp - 32], rax
	mov	dword ptr [rbp - 36], ecx
Ltmp5:
	lea	rdi, [rbp - 16]
	call	__ZN8EngineerD1Ev
Ltmp6:
	jmp	LBB0_6
LBB0_5:
Ltmp9:
	mov	ecx, edx
	mov	qword ptr [rbp - 32], rax
	mov	dword ptr [rbp - 36], ecx
	jmp	LBB0_7
LBB0_6:
	jmp	LBB0_7
LBB0_7:
Ltmp10:
	lea	rdi, [rbp - 8]
	call	__ZN7StudentD1Ev
Ltmp11:
	jmp	LBB0_8
LBB0_8:
	jmp	LBB0_9
LBB0_9:
	mov	rdi, qword ptr [rbp - 32]
	call	__Unwind_Resume
LBB0_10:
Ltmp12:
	mov	ecx, edx
	mov	rdi, rax
	mov	dword ptr [rbp - 60], ecx ## 4-byte Spill
	call	___clang_call_terminate
Lfunc_end0:
	.cfi_endproc
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table0:
Lexception0:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	73                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	65                      ## Call site table length
Lset0 = Ltmp0-Lfunc_begin0              ## >> Call Site 1 <<
	.long	Lset0
Lset1 = Ltmp3-Ltmp0                     ##   Call between Ltmp0 and Ltmp3
	.long	Lset1
Lset2 = Ltmp4-Lfunc_begin0              ##     jumps to Ltmp4
	.long	Lset2
	.byte	0                       ##   On action: cleanup
Lset3 = Ltmp7-Lfunc_begin0              ## >> Call Site 2 <<
	.long	Lset3
Lset4 = Ltmp8-Ltmp7                     ##   Call between Ltmp7 and Ltmp8
	.long	Lset4
Lset5 = Ltmp9-Lfunc_begin0              ##     jumps to Ltmp9
	.long	Lset5
	.byte	0                       ##   On action: cleanup
Lset6 = Ltmp8-Lfunc_begin0              ## >> Call Site 3 <<
	.long	Lset6
Lset7 = Ltmp5-Ltmp8                     ##   Call between Ltmp8 and Ltmp5
	.long	Lset7
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset8 = Ltmp5-Lfunc_begin0              ## >> Call Site 4 <<
	.long	Lset8
Lset9 = Ltmp11-Ltmp5                    ##   Call between Ltmp5 and Ltmp11
	.long	Lset9
Lset10 = Ltmp12-Lfunc_begin0            ##     jumps to Ltmp12
	.long	Lset10
	.byte	1                       ##   On action: 1
Lset11 = Ltmp11-Lfunc_begin0            ## >> Call Site 5 <<
	.long	Lset11
Lset12 = Lfunc_end0-Ltmp11              ##   Call between Ltmp11 and Lfunc_end0
	.long	Lset12
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN7StudentC1Ev
	.weak_def_can_be_hidden	__ZN7StudentC1Ev
	.align	4, 0x90
__ZN7StudentC1Ev:                       ## @_ZN7StudentC1Ev
## BB#0:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	qword ptr [rbp - 8], rdi
	mov	rdi, qword ptr [rbp - 8]
	call	__ZN7StudentC2Ev
	add	rsp, 16
	pop	rbp
	ret

	.globl	__ZN8EngineerC1Ev
	.weak_def_can_be_hidden	__ZN8EngineerC1Ev
	.align	4, 0x90
__ZN8EngineerC1Ev:                      ## @_ZN8EngineerC1Ev
## BB#0:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	qword ptr [rbp - 8], rdi
	mov	rdi, qword ptr [rbp - 8]
	call	__ZN8EngineerC2Ev
	add	rsp, 16
	pop	rbp
	ret

	.globl	__ZN8EngineerD1Ev
	.weak_def_can_be_hidden	__ZN8EngineerD1Ev
	.align	4, 0x90
__ZN8EngineerD1Ev:                      ## @_ZN8EngineerD1Ev
	.cfi_startproc
## BB#0:
	push	rbp
Ltmp16:
	.cfi_def_cfa_offset 16
Ltmp17:
	.cfi_offset rbp, -16
	mov	rbp, rsp
Ltmp18:
	.cfi_def_cfa_register rbp
	sub	rsp, 16
	mov	qword ptr [rbp - 8], rdi
	mov	rdi, qword ptr [rbp - 8]
	call	__ZN8EngineerD2Ev
	add	rsp, 16
	pop	rbp
	ret
	.cfi_endproc

	.private_extern	___clang_call_terminate
	.globl	___clang_call_terminate
	.weak_def_can_be_hidden	___clang_call_terminate
	.align	4, 0x90
___clang_call_terminate:                ## @__clang_call_terminate
## BB#0:
	push	rax
	call	___cxa_begin_catch
	mov	qword ptr [rsp], rax    ## 8-byte Spill
	call	__ZSt9terminatev

	.globl	__ZN7StudentD1Ev
	.weak_def_can_be_hidden	__ZN7StudentD1Ev
	.align	4, 0x90
__ZN7StudentD1Ev:                       ## @_ZN7StudentD1Ev
	.cfi_startproc
## BB#0:
	push	rbp
Ltmp19:
	.cfi_def_cfa_offset 16
Ltmp20:
	.cfi_offset rbp, -16
	mov	rbp, rsp
Ltmp21:
	.cfi_def_cfa_register rbp
	sub	rsp, 16
	mov	qword ptr [rbp - 8], rdi
	mov	rdi, qword ptr [rbp - 8]
	call	__ZN7StudentD2Ev
	add	rsp, 16
	pop	rbp
	ret
	.cfi_endproc

	.globl	__ZN7StudentC2Ev
	.weak_def_can_be_hidden	__ZN7StudentC2Ev
	.align	4, 0x90
__ZN7StudentC2Ev:                       ## @_ZN7StudentC2Ev
## BB#0:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	qword ptr [rbp - 8], rdi
	mov	rdi, qword ptr [rbp - 8]
	mov	rax, rdi
	mov	qword ptr [rbp - 16], rdi ## 8-byte Spill
	mov	rdi, rax
	call	__ZN6PersonC2Ev
	mov	rax, qword ptr [rip + __ZTV7Student@GOTPCREL]
	add	rax, 16
	mov	rdi, qword ptr [rbp - 16] ## 8-byte Reload
	mov	qword ptr [rdi], rax
	add	rsp, 16
	pop	rbp
	ret

	.globl	__ZN6PersonC2Ev
	.weak_def_can_be_hidden	__ZN6PersonC2Ev
	.align	4, 0x90
__ZN6PersonC2Ev:                        ## @_ZN6PersonC2Ev
## BB#0:
	push	rbp
	mov	rbp, rsp
	mov	rax, qword ptr [rip + __ZTV6Person@GOTPCREL]
	add	rax, 16
	mov	qword ptr [rbp - 8], rdi
	mov	rdi, qword ptr [rbp - 8]
	mov	qword ptr [rdi], rax
	pop	rbp
	ret

	.globl	__ZNK7Student1fEv
	.weak_def_can_be_hidden	__ZNK7Student1fEv
	.align	4, 0x90
__ZNK7Student1fEv:                      ## @_ZNK7Student1fEv
	.cfi_startproc
## BB#0:
	push	rbp
Ltmp22:
	.cfi_def_cfa_offset 16
Ltmp23:
	.cfi_offset rbp, -16
	mov	rbp, rsp
Ltmp24:
	.cfi_def_cfa_register rbp
	sub	rsp, 32
	mov	rax, qword ptr [rip + __ZNSt3__14coutE@GOTPCREL]
	lea	rsi, [rip + L_.str]
	mov	qword ptr [rbp - 24], rdi
	mov	rdi, rax
	call	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	lea	rsi, [rip + __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_]
	mov	qword ptr [rbp - 8], rax
	mov	qword ptr [rbp - 16], rsi
	mov	rdi, qword ptr [rbp - 8]
	call	qword ptr [rbp - 16]
	mov	qword ptr [rbp - 32], rax ## 8-byte Spill
	add	rsp, 32
	pop	rbp
	ret
	.cfi_endproc

	.globl	__ZNK7Student1qEv
	.weak_def_can_be_hidden	__ZNK7Student1qEv
	.align	4, 0x90
__ZNK7Student1qEv:                      ## @_ZNK7Student1qEv
	.cfi_startproc
## BB#0:
	push	rbp
Ltmp25:
	.cfi_def_cfa_offset 16
Ltmp26:
	.cfi_offset rbp, -16
	mov	rbp, rsp
Ltmp27:
	.cfi_def_cfa_register rbp
	sub	rsp, 32
	mov	rax, qword ptr [rip + __ZNSt3__14coutE@GOTPCREL]
	lea	rsi, [rip + L_.str.1]
	mov	qword ptr [rbp - 24], rdi
	mov	rdi, rax
	call	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	lea	rsi, [rip + __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_]
	mov	qword ptr [rbp - 8], rax
	mov	qword ptr [rbp - 16], rsi
	mov	rdi, qword ptr [rbp - 8]
	call	qword ptr [rbp - 16]
	mov	qword ptr [rbp - 32], rax ## 8-byte Spill
	add	rsp, 32
	pop	rbp
	ret
	.cfi_endproc

	.globl	__ZN7StudentD0Ev
	.weak_def_can_be_hidden	__ZN7StudentD0Ev
	.align	4, 0x90
__ZN7StudentD0Ev:                       ## @_ZN7StudentD0Ev
Lfunc_begin1:
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
	.cfi_lsda 16, Lexception1
## BB#0:
	push	rbp
Ltmp31:
	.cfi_def_cfa_offset 16
Ltmp32:
	.cfi_offset rbp, -16
	mov	rbp, rsp
Ltmp33:
	.cfi_def_cfa_register rbp
	sub	rsp, 32
	mov	qword ptr [rbp - 8], rdi
	mov	rax, rdi
Ltmp28:
	mov	qword ptr [rbp - 32], rax ## 8-byte Spill
	call	__ZN7StudentD1Ev
Ltmp29:
	jmp	LBB10_1
LBB10_1:
	mov	rax, qword ptr [rbp - 32] ## 8-byte Reload
	mov	rdi, rax
	call	__ZdlPv
	add	rsp, 32
	pop	rbp
	ret
LBB10_2:
Ltmp30:
	mov	ecx, edx
	mov	qword ptr [rbp - 16], rax
	mov	dword ptr [rbp - 20], ecx
	mov	rax, qword ptr [rbp - 32] ## 8-byte Reload
	mov	rdi, rax
	call	__ZdlPv
## BB#3:
	mov	rdi, qword ptr [rbp - 16]
	call	__Unwind_Resume
Lfunc_end1:
	.cfi_endproc
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table10:
Lexception1:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\234"                  ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	26                      ## Call site table length
Lset13 = Ltmp28-Lfunc_begin1            ## >> Call Site 1 <<
	.long	Lset13
Lset14 = Ltmp29-Ltmp28                  ##   Call between Ltmp28 and Ltmp29
	.long	Lset14
Lset15 = Ltmp30-Lfunc_begin1            ##     jumps to Ltmp30
	.long	Lset15
	.byte	0                       ##   On action: cleanup
Lset16 = Ltmp29-Lfunc_begin1            ## >> Call Site 2 <<
	.long	Lset16
Lset17 = Lfunc_end1-Ltmp29              ##   Call between Ltmp29 and Lfunc_end1
	.long	Lset17
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN6PersonD1Ev
	.weak_def_can_be_hidden	__ZN6PersonD1Ev
	.align	4, 0x90
__ZN6PersonD1Ev:                        ## @_ZN6PersonD1Ev
	.cfi_startproc
## BB#0:
	push	rbp
Ltmp34:
	.cfi_def_cfa_offset 16
Ltmp35:
	.cfi_offset rbp, -16
	mov	rbp, rsp
Ltmp36:
	.cfi_def_cfa_register rbp
	sub	rsp, 16
	mov	qword ptr [rbp - 8], rdi
	mov	rdi, qword ptr [rbp - 8]
	call	__ZN6PersonD2Ev
	add	rsp, 16
	pop	rbp
	ret
	.cfi_endproc

	.globl	__ZN6PersonD0Ev
	.weak_def_can_be_hidden	__ZN6PersonD0Ev
	.align	4, 0x90
__ZN6PersonD0Ev:                        ## @_ZN6PersonD0Ev
Lfunc_begin2:
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
	.cfi_lsda 16, Lexception2
## BB#0:
	push	rbp
Ltmp40:
	.cfi_def_cfa_offset 16
Ltmp41:
	.cfi_offset rbp, -16
	mov	rbp, rsp
Ltmp42:
	.cfi_def_cfa_register rbp
	sub	rsp, 32
	mov	qword ptr [rbp - 8], rdi
	mov	rax, rdi
Ltmp37:
	mov	qword ptr [rbp - 32], rax ## 8-byte Spill
	call	__ZN6PersonD1Ev
Ltmp38:
	jmp	LBB12_1
LBB12_1:
	mov	rax, qword ptr [rbp - 32] ## 8-byte Reload
	mov	rdi, rax
	call	__ZdlPv
	add	rsp, 32
	pop	rbp
	ret
LBB12_2:
Ltmp39:
	mov	ecx, edx
	mov	qword ptr [rbp - 16], rax
	mov	dword ptr [rbp - 20], ecx
	mov	rax, qword ptr [rbp - 32] ## 8-byte Reload
	mov	rdi, rax
	call	__ZdlPv
## BB#3:
	mov	rdi, qword ptr [rbp - 16]
	call	__Unwind_Resume
Lfunc_end2:
	.cfi_endproc
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table12:
Lexception2:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\234"                  ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	26                      ## Call site table length
Lset18 = Ltmp37-Lfunc_begin2            ## >> Call Site 1 <<
	.long	Lset18
Lset19 = Ltmp38-Ltmp37                  ##   Call between Ltmp37 and Ltmp38
	.long	Lset19
Lset20 = Ltmp39-Lfunc_begin2            ##     jumps to Ltmp39
	.long	Lset20
	.byte	0                       ##   On action: cleanup
Lset21 = Ltmp38-Lfunc_begin2            ## >> Call Site 2 <<
	.long	Lset21
Lset22 = Lfunc_end2-Ltmp38              ##   Call between Ltmp38 and Lfunc_end2
	.long	Lset22
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN6PersonD2Ev
	.weak_def_can_be_hidden	__ZN6PersonD2Ev
	.align	4, 0x90
__ZN6PersonD2Ev:                        ## @_ZN6PersonD2Ev
## BB#0:
	push	rbp
	mov	rbp, rsp
	mov	qword ptr [rbp - 8], rdi
	pop	rbp
	ret

	.globl	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	.weak_def_can_be_hidden	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	.align	4, 0x90
__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc: ## @_ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	.cfi_startproc
## BB#0:
	push	rbp
Ltmp43:
	.cfi_def_cfa_offset 16
Ltmp44:
	.cfi_offset rbp, -16
	mov	rbp, rsp
Ltmp45:
	.cfi_def_cfa_register rbp
	sub	rsp, 32
	mov	qword ptr [rbp - 8], rdi
	mov	qword ptr [rbp - 16], rsi
	mov	rdi, qword ptr [rbp - 8]
	mov	rsi, qword ptr [rbp - 16]
	mov	rax, qword ptr [rbp - 16]
	mov	qword ptr [rbp - 24], rdi ## 8-byte Spill
	mov	rdi, rax
	mov	qword ptr [rbp - 32], rsi ## 8-byte Spill
	call	__ZNSt3__111char_traitsIcE6lengthEPKc
	mov	rdi, qword ptr [rbp - 24] ## 8-byte Reload
	mov	rsi, qword ptr [rbp - 32] ## 8-byte Reload
	mov	rdx, rax
	call	__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m
	add	rsp, 32
	pop	rbp
	ret
	.cfi_endproc

	.private_extern	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_
	.globl	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_
	.weak_definition	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_
	.align	4, 0x90
__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_: ## @_ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_
Lfunc_begin3:
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
	.cfi_lsda 16, Lexception3
## BB#0:
	push	rbp
Ltmp54:
	.cfi_def_cfa_offset 16
Ltmp55:
	.cfi_offset rbp, -16
	mov	rbp, rsp
Ltmp56:
	.cfi_def_cfa_register rbp
	sub	rsp, 144
	mov	qword ptr [rbp - 72], rdi
	mov	rax, rdi
	mov	rcx, qword ptr [rdi]
	mov	rcx, qword ptr [rcx - 24]
	add	rdi, rcx
	mov	qword ptr [rbp - 32], rdi
	mov	byte ptr [rbp - 33], 10
	mov	rsi, qword ptr [rbp - 32]
	lea	rcx, [rbp - 48]
	mov	rdi, rcx
	mov	qword ptr [rbp - 80], rax ## 8-byte Spill
	mov	qword ptr [rbp - 88], rcx ## 8-byte Spill
	call	__ZNKSt3__18ios_base6getlocEv
	mov	rax, qword ptr [rbp - 88] ## 8-byte Reload
	mov	qword ptr [rbp - 24], rax
Ltmp46:
	mov	rsi, qword ptr [rip + __ZNSt3__15ctypeIcE2idE@GOTPCREL]
	mov	rdi, rax
	call	__ZNKSt3__16locale9use_facetERNS0_2idE
Ltmp47:
	mov	qword ptr [rbp - 96], rax ## 8-byte Spill
	jmp	LBB15_1
LBB15_1:
	mov	al, byte ptr [rbp - 33]
	mov	rcx, qword ptr [rbp - 96] ## 8-byte Reload
	mov	qword ptr [rbp - 8], rcx
	mov	byte ptr [rbp - 9], al
	mov	rdx, qword ptr [rbp - 8]
	mov	rsi, qword ptr [rdx]
	mov	rsi, qword ptr [rsi + 56]
	movsx	edi, byte ptr [rbp - 9]
Ltmp48:
	mov	dword ptr [rbp - 100], edi ## 4-byte Spill
	mov	rdi, rdx
	mov	r8d, dword ptr [rbp - 100] ## 4-byte Reload
	mov	qword ptr [rbp - 112], rsi ## 8-byte Spill
	mov	esi, r8d
	mov	rdx, qword ptr [rbp - 112] ## 8-byte Reload
	call	rdx
Ltmp49:
	mov	byte ptr [rbp - 113], al ## 1-byte Spill
	jmp	LBB15_5
LBB15_2:
Ltmp50:
	mov	ecx, edx
	mov	qword ptr [rbp - 56], rax
	mov	dword ptr [rbp - 60], ecx
Ltmp51:
	lea	rdi, [rbp - 48]
	call	__ZNSt3__16localeD1Ev
Ltmp52:
	jmp	LBB15_3
LBB15_3:
	mov	rdi, qword ptr [rbp - 56]
	call	__Unwind_Resume
LBB15_4:
Ltmp53:
	mov	ecx, edx
	mov	rdi, rax
	mov	dword ptr [rbp - 120], ecx ## 4-byte Spill
	call	___clang_call_terminate
LBB15_5:
	lea	rdi, [rbp - 48]
	call	__ZNSt3__16localeD1Ev
	mov	rdi, qword ptr [rbp - 80] ## 8-byte Reload
	mov	al, byte ptr [rbp - 113] ## 1-byte Reload
	movsx	esi, al
	call	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc
	mov	rdi, qword ptr [rbp - 72]
	mov	qword ptr [rbp - 128], rax ## 8-byte Spill
	call	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv
	mov	rdi, qword ptr [rbp - 72]
	mov	qword ptr [rbp - 136], rax ## 8-byte Spill
	mov	rax, rdi
	add	rsp, 144
	pop	rbp
	ret
Lfunc_end3:
	.cfi_endproc
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table15:
Lexception3:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\274"                  ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	52                      ## Call site table length
Lset23 = Lfunc_begin3-Lfunc_begin3      ## >> Call Site 1 <<
	.long	Lset23
Lset24 = Ltmp46-Lfunc_begin3            ##   Call between Lfunc_begin3 and Ltmp46
	.long	Lset24
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset25 = Ltmp46-Lfunc_begin3            ## >> Call Site 2 <<
	.long	Lset25
Lset26 = Ltmp49-Ltmp46                  ##   Call between Ltmp46 and Ltmp49
	.long	Lset26
Lset27 = Ltmp50-Lfunc_begin3            ##     jumps to Ltmp50
	.long	Lset27
	.byte	0                       ##   On action: cleanup
Lset28 = Ltmp51-Lfunc_begin3            ## >> Call Site 3 <<
	.long	Lset28
Lset29 = Ltmp52-Ltmp51                  ##   Call between Ltmp51 and Ltmp52
	.long	Lset29
Lset30 = Ltmp53-Lfunc_begin3            ##     jumps to Ltmp53
	.long	Lset30
	.byte	1                       ##   On action: 1
Lset31 = Ltmp52-Lfunc_begin3            ## >> Call Site 4 <<
	.long	Lset31
Lset32 = Lfunc_end3-Ltmp52              ##   Call between Ltmp52 and Lfunc_end3
	.long	Lset32
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m
	.weak_def_can_be_hidden	__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m
	.align	4, 0x90
__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m: ## @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m
Lfunc_begin4:
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
	.cfi_lsda 16, Lexception4
## BB#0:
	push	rbp
Ltmp87:
	.cfi_def_cfa_offset 16
Ltmp88:
	.cfi_offset rbp, -16
	mov	rbp, rsp
Ltmp89:
	.cfi_def_cfa_register rbp
	sub	rsp, 416
	mov	qword ptr [rbp - 200], rdi
	mov	qword ptr [rbp - 208], rsi
	mov	qword ptr [rbp - 216], rdx
	mov	rsi, qword ptr [rbp - 200]
Ltmp57:
	lea	rdi, [rbp - 232]
	call	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_
Ltmp58:
	jmp	LBB16_1
LBB16_1:
	lea	rax, [rbp - 232]
	mov	qword ptr [rbp - 192], rax
	mov	rax, qword ptr [rbp - 192]
	mov	cl, byte ptr [rax]
	mov	byte ptr [rbp - 265], cl ## 1-byte Spill
## BB#2:
	mov	al, byte ptr [rbp - 265] ## 1-byte Reload
	test	al, 1
	jne	LBB16_3
	jmp	LBB16_26
LBB16_3:
	lea	rax, [rbp - 256]
	mov	rcx, qword ptr [rbp - 200]
	mov	qword ptr [rbp - 176], rax
	mov	qword ptr [rbp - 184], rcx
	mov	rax, qword ptr [rbp - 176]
	mov	rcx, qword ptr [rbp - 184]
	mov	qword ptr [rbp - 144], rax
	mov	qword ptr [rbp - 152], rcx
	mov	rax, qword ptr [rbp - 144]
	mov	rcx, qword ptr [rbp - 152]
	mov	rdx, qword ptr [rcx]
	mov	rdx, qword ptr [rdx - 24]
	add	rcx, rdx
	mov	qword ptr [rbp - 136], rcx
	mov	rcx, qword ptr [rbp - 136]
	mov	qword ptr [rbp - 128], rcx
	mov	rcx, qword ptr [rbp - 128]
	mov	rcx, qword ptr [rcx + 40]
	mov	qword ptr [rax], rcx
	mov	rsi, qword ptr [rbp - 208]
	mov	rax, qword ptr [rbp - 200]
	mov	rcx, qword ptr [rax]
	mov	rcx, qword ptr [rcx - 24]
	add	rax, rcx
	mov	qword ptr [rbp - 88], rax
	mov	rax, qword ptr [rbp - 88]
	mov	edi, dword ptr [rax + 8]
	mov	qword ptr [rbp - 280], rsi ## 8-byte Spill
	mov	dword ptr [rbp - 284], edi ## 4-byte Spill
## BB#4:
	mov	eax, dword ptr [rbp - 284] ## 4-byte Reload
	and	eax, 176
	cmp	eax, 32
	jne	LBB16_6
## BB#5:
	mov	rax, qword ptr [rbp - 208]
	add	rax, qword ptr [rbp - 216]
	mov	qword ptr [rbp - 296], rax ## 8-byte Spill
	jmp	LBB16_7
LBB16_6:
	mov	rax, qword ptr [rbp - 208]
	mov	qword ptr [rbp - 296], rax ## 8-byte Spill
LBB16_7:
	mov	rax, qword ptr [rbp - 296] ## 8-byte Reload
	mov	rcx, qword ptr [rbp - 208]
	add	rcx, qword ptr [rbp - 216]
	mov	rdx, qword ptr [rbp - 200]
	mov	rsi, qword ptr [rdx]
	mov	rsi, qword ptr [rsi - 24]
	add	rdx, rsi
	mov	rsi, qword ptr [rbp - 200]
	mov	rdi, qword ptr [rsi]
	mov	rdi, qword ptr [rdi - 24]
	add	rsi, rdi
	mov	qword ptr [rbp - 72], rsi
	mov	rsi, qword ptr [rbp - 72]
	mov	qword ptr [rbp - 304], rax ## 8-byte Spill
	mov	qword ptr [rbp - 312], rcx ## 8-byte Spill
	mov	qword ptr [rbp - 320], rdx ## 8-byte Spill
	mov	qword ptr [rbp - 328], rsi ## 8-byte Spill
	call	__ZNSt3__111char_traitsIcE3eofEv
	mov	rcx, qword ptr [rbp - 328] ## 8-byte Reload
	mov	esi, dword ptr [rcx + 144]
	mov	edi, eax
	call	__ZNSt3__111char_traitsIcE11eq_int_typeEii
	test	al, 1
	jne	LBB16_8
	jmp	LBB16_16
LBB16_8:
	mov	rax, qword ptr [rbp - 328] ## 8-byte Reload
	mov	qword ptr [rbp - 32], rax
	mov	byte ptr [rbp - 33], 32
	mov	rsi, qword ptr [rbp - 32]
Ltmp59:
	lea	rdi, [rbp - 48]
	call	__ZNKSt3__18ios_base6getlocEv
Ltmp60:
	jmp	LBB16_9
LBB16_9:
	lea	rax, [rbp - 48]
	mov	qword ptr [rbp - 24], rax
Ltmp61:
	mov	rsi, qword ptr [rip + __ZNSt3__15ctypeIcE2idE@GOTPCREL]
	mov	rdi, rax
	call	__ZNKSt3__16locale9use_facetERNS0_2idE
Ltmp62:
	mov	qword ptr [rbp - 336], rax ## 8-byte Spill
	jmp	LBB16_10
LBB16_10:
	mov	al, byte ptr [rbp - 33]
	mov	rcx, qword ptr [rbp - 336] ## 8-byte Reload
	mov	qword ptr [rbp - 8], rcx
	mov	byte ptr [rbp - 9], al
	mov	rdx, qword ptr [rbp - 8]
	mov	rsi, qword ptr [rdx]
	mov	rsi, qword ptr [rsi + 56]
	movsx	edi, byte ptr [rbp - 9]
Ltmp63:
	mov	dword ptr [rbp - 340], edi ## 4-byte Spill
	mov	rdi, rdx
	mov	r8d, dword ptr [rbp - 340] ## 4-byte Reload
	mov	qword ptr [rbp - 352], rsi ## 8-byte Spill
	mov	esi, r8d
	mov	rdx, qword ptr [rbp - 352] ## 8-byte Reload
	call	rdx
Ltmp64:
	mov	byte ptr [rbp - 353], al ## 1-byte Spill
	jmp	LBB16_14
LBB16_11:
Ltmp65:
	mov	ecx, edx
	mov	qword ptr [rbp - 56], rax
	mov	dword ptr [rbp - 60], ecx
Ltmp66:
	lea	rdi, [rbp - 48]
	call	__ZNSt3__16localeD1Ev
Ltmp67:
	jmp	LBB16_12
LBB16_12:
	mov	rax, qword ptr [rbp - 56]
	mov	ecx, dword ptr [rbp - 60]
	mov	qword ptr [rbp - 368], rax ## 8-byte Spill
	mov	dword ptr [rbp - 372], ecx ## 4-byte Spill
	jmp	LBB16_24
LBB16_13:
Ltmp68:
	mov	ecx, edx
	mov	rdi, rax
	mov	dword ptr [rbp - 376], ecx ## 4-byte Spill
	call	___clang_call_terminate
LBB16_14:
Ltmp69:
	lea	rdi, [rbp - 48]
	call	__ZNSt3__16localeD1Ev
Ltmp70:
	jmp	LBB16_15
LBB16_15:
	mov	al, byte ptr [rbp - 353] ## 1-byte Reload
	movsx	ecx, al
	mov	rdx, qword ptr [rbp - 328] ## 8-byte Reload
	mov	dword ptr [rdx + 144], ecx
LBB16_16:
	mov	rax, qword ptr [rbp - 328] ## 8-byte Reload
	mov	ecx, dword ptr [rax + 144]
	mov	dl, cl
	mov	byte ptr [rbp - 377], dl ## 1-byte Spill
## BB#17:
	mov	rdi, qword ptr [rbp - 256]
Ltmp71:
	mov	al, byte ptr [rbp - 377] ## 1-byte Reload
	movsx	r9d, al
	mov	rsi, qword ptr [rbp - 280] ## 8-byte Reload
	mov	rdx, qword ptr [rbp - 304] ## 8-byte Reload
	mov	rcx, qword ptr [rbp - 312] ## 8-byte Reload
	mov	r8, qword ptr [rbp - 320] ## 8-byte Reload
	call	__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_
Ltmp72:
	mov	qword ptr [rbp - 392], rax ## 8-byte Spill
	jmp	LBB16_18
LBB16_18:
	lea	rax, [rbp - 264]
	mov	rcx, qword ptr [rbp - 392] ## 8-byte Reload
	mov	qword ptr [rbp - 264], rcx
	mov	qword ptr [rbp - 80], rax
	mov	rax, qword ptr [rbp - 80]
	cmp	qword ptr [rax], 0
	jne	LBB16_25
## BB#19:
	mov	rax, qword ptr [rbp - 200]
	mov	rcx, qword ptr [rax]
	mov	rcx, qword ptr [rcx - 24]
	add	rax, rcx
	mov	qword ptr [rbp - 112], rax
	mov	dword ptr [rbp - 116], 5
	mov	rax, qword ptr [rbp - 112]
	mov	qword ptr [rbp - 96], rax
	mov	dword ptr [rbp - 100], 5
	mov	rax, qword ptr [rbp - 96]
	mov	edx, dword ptr [rax + 32]
	or	edx, 5
Ltmp73:
	mov	rdi, rax
	mov	esi, edx
	call	__ZNSt3__18ios_base5clearEj
Ltmp74:
	jmp	LBB16_20
LBB16_20:
	jmp	LBB16_21
LBB16_21:
	jmp	LBB16_25
LBB16_22:
Ltmp80:
	mov	ecx, edx
	mov	qword ptr [rbp - 240], rax
	mov	dword ptr [rbp - 244], ecx
	jmp	LBB16_29
LBB16_23:
Ltmp75:
	mov	ecx, edx
	mov	qword ptr [rbp - 368], rax ## 8-byte Spill
	mov	dword ptr [rbp - 372], ecx ## 4-byte Spill
	jmp	LBB16_24
LBB16_24:
	mov	eax, dword ptr [rbp - 372] ## 4-byte Reload
	mov	rcx, qword ptr [rbp - 368] ## 8-byte Reload
	mov	qword ptr [rbp - 240], rcx
	mov	dword ptr [rbp - 244], eax
Ltmp76:
	lea	rdi, [rbp - 232]
	call	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev
Ltmp77:
	jmp	LBB16_28
LBB16_25:
	jmp	LBB16_26
LBB16_26:
Ltmp78:
	lea	rdi, [rbp - 232]
	call	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev
Ltmp79:
	jmp	LBB16_27
LBB16_27:
	jmp	LBB16_31
LBB16_28:
	jmp	LBB16_29
LBB16_29:
	mov	rdi, qword ptr [rbp - 240]
	call	___cxa_begin_catch
	mov	rdi, qword ptr [rbp - 200]
	mov	rcx, qword ptr [rdi]
	mov	rcx, qword ptr [rcx - 24]
	add	rdi, rcx
Ltmp81:
	mov	qword ptr [rbp - 400], rax ## 8-byte Spill
	call	__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv
Ltmp82:
	jmp	LBB16_30
LBB16_30:
	call	___cxa_end_catch
LBB16_31:
	mov	rax, qword ptr [rbp - 200]
	add	rsp, 416
	pop	rbp
	ret
LBB16_32:
Ltmp83:
	mov	ecx, edx
	mov	qword ptr [rbp - 240], rax
	mov	dword ptr [rbp - 244], ecx
Ltmp84:
	call	___cxa_end_catch
Ltmp85:
	jmp	LBB16_33
LBB16_33:
	jmp	LBB16_34
LBB16_34:
	mov	rdi, qword ptr [rbp - 240]
	call	__Unwind_Resume
LBB16_35:
Ltmp86:
	mov	ecx, edx
	mov	rdi, rax
	mov	dword ptr [rbp - 404], ecx ## 4-byte Spill
	call	___clang_call_terminate
Lfunc_end4:
	.cfi_endproc
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table16:
Lexception4:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\253\201"              ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.ascii	"\234\001"              ## Call site table length
Lset33 = Ltmp57-Lfunc_begin4            ## >> Call Site 1 <<
	.long	Lset33
Lset34 = Ltmp58-Ltmp57                  ##   Call between Ltmp57 and Ltmp58
	.long	Lset34
Lset35 = Ltmp80-Lfunc_begin4            ##     jumps to Ltmp80
	.long	Lset35
	.byte	5                       ##   On action: 3
Lset36 = Ltmp59-Lfunc_begin4            ## >> Call Site 2 <<
	.long	Lset36
Lset37 = Ltmp60-Ltmp59                  ##   Call between Ltmp59 and Ltmp60
	.long	Lset37
Lset38 = Ltmp75-Lfunc_begin4            ##     jumps to Ltmp75
	.long	Lset38
	.byte	5                       ##   On action: 3
Lset39 = Ltmp61-Lfunc_begin4            ## >> Call Site 3 <<
	.long	Lset39
Lset40 = Ltmp64-Ltmp61                  ##   Call between Ltmp61 and Ltmp64
	.long	Lset40
Lset41 = Ltmp65-Lfunc_begin4            ##     jumps to Ltmp65
	.long	Lset41
	.byte	3                       ##   On action: 2
Lset42 = Ltmp66-Lfunc_begin4            ## >> Call Site 4 <<
	.long	Lset42
Lset43 = Ltmp67-Ltmp66                  ##   Call between Ltmp66 and Ltmp67
	.long	Lset43
Lset44 = Ltmp68-Lfunc_begin4            ##     jumps to Ltmp68
	.long	Lset44
	.byte	7                       ##   On action: 4
Lset45 = Ltmp69-Lfunc_begin4            ## >> Call Site 5 <<
	.long	Lset45
Lset46 = Ltmp74-Ltmp69                  ##   Call between Ltmp69 and Ltmp74
	.long	Lset46
Lset47 = Ltmp75-Lfunc_begin4            ##     jumps to Ltmp75
	.long	Lset47
	.byte	5                       ##   On action: 3
Lset48 = Ltmp76-Lfunc_begin4            ## >> Call Site 6 <<
	.long	Lset48
Lset49 = Ltmp77-Ltmp76                  ##   Call between Ltmp76 and Ltmp77
	.long	Lset49
Lset50 = Ltmp86-Lfunc_begin4            ##     jumps to Ltmp86
	.long	Lset50
	.byte	5                       ##   On action: 3
Lset51 = Ltmp78-Lfunc_begin4            ## >> Call Site 7 <<
	.long	Lset51
Lset52 = Ltmp79-Ltmp78                  ##   Call between Ltmp78 and Ltmp79
	.long	Lset52
Lset53 = Ltmp80-Lfunc_begin4            ##     jumps to Ltmp80
	.long	Lset53
	.byte	5                       ##   On action: 3
Lset54 = Ltmp79-Lfunc_begin4            ## >> Call Site 8 <<
	.long	Lset54
Lset55 = Ltmp81-Ltmp79                  ##   Call between Ltmp79 and Ltmp81
	.long	Lset55
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset56 = Ltmp81-Lfunc_begin4            ## >> Call Site 9 <<
	.long	Lset56
Lset57 = Ltmp82-Ltmp81                  ##   Call between Ltmp81 and Ltmp82
	.long	Lset57
Lset58 = Ltmp83-Lfunc_begin4            ##     jumps to Ltmp83
	.long	Lset58
	.byte	0                       ##   On action: cleanup
Lset59 = Ltmp82-Lfunc_begin4            ## >> Call Site 10 <<
	.long	Lset59
Lset60 = Ltmp84-Ltmp82                  ##   Call between Ltmp82 and Ltmp84
	.long	Lset60
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset61 = Ltmp84-Lfunc_begin4            ## >> Call Site 11 <<
	.long	Lset61
Lset62 = Ltmp85-Ltmp84                  ##   Call between Ltmp84 and Ltmp85
	.long	Lset62
Lset63 = Ltmp86-Lfunc_begin4            ##     jumps to Ltmp86
	.long	Lset63
	.byte	5                       ##   On action: 3
Lset64 = Ltmp85-Lfunc_begin4            ## >> Call Site 12 <<
	.long	Lset64
Lset65 = Lfunc_end4-Ltmp85              ##   Call between Ltmp85 and Lfunc_end4
	.long	Lset65
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.byte	0                       ## >> Action Record 1 <<
                                        ##   Cleanup
	.byte	0                       ##   No further actions
	.byte	1                       ## >> Action Record 2 <<
                                        ##   Catch TypeInfo 1
	.byte	125                     ##   Continue to action 1
	.byte	1                       ## >> Action Record 3 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
	.byte	1                       ## >> Action Record 4 <<
                                        ##   Catch TypeInfo 1
	.byte	125                     ##   Continue to action 3
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZNSt3__111char_traitsIcE6lengthEPKc
	.weak_def_can_be_hidden	__ZNSt3__111char_traitsIcE6lengthEPKc
	.align	4, 0x90
__ZNSt3__111char_traitsIcE6lengthEPKc:  ## @_ZNSt3__111char_traitsIcE6lengthEPKc
	.cfi_startproc
## BB#0:
	push	rbp
Ltmp90:
	.cfi_def_cfa_offset 16
Ltmp91:
	.cfi_offset rbp, -16
	mov	rbp, rsp
Ltmp92:
	.cfi_def_cfa_register rbp
	sub	rsp, 16
	mov	qword ptr [rbp - 8], rdi
	mov	rdi, qword ptr [rbp - 8]
	call	_strlen
	add	rsp, 16
	pop	rbp
	ret
	.cfi_endproc

	.private_extern	__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_
	.globl	__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_
	.weak_def_can_be_hidden	__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_
	.align	4, 0x90
__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_: ## @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_
Lfunc_begin5:
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
	.cfi_lsda 16, Lexception5
## BB#0:
	push	rbp
Ltmp99:
	.cfi_def_cfa_offset 16
Ltmp100:
	.cfi_offset rbp, -16
	mov	rbp, rsp
Ltmp101:
	.cfi_def_cfa_register rbp
	sub	rsp, 736
	mov	al, r9b
	lea	r10, [rbp - 552]
	lea	r11, [rbp - 488]
	mov	qword ptr [rbp - 504], rdi
	mov	qword ptr [rbp - 512], rsi
	mov	qword ptr [rbp - 520], rdx
	mov	qword ptr [rbp - 528], rcx
	mov	qword ptr [rbp - 536], r8
	mov	byte ptr [rbp - 537], al
	mov	rcx, qword ptr [rbp - 504]
	mov	qword ptr [rbp - 472], r11
	mov	qword ptr [rbp - 480], -1
	mov	rdx, qword ptr [rbp - 472]
	mov	rsi, qword ptr [rbp - 480]
	mov	qword ptr [rbp - 456], rdx
	mov	qword ptr [rbp - 464], rsi
	mov	rdx, qword ptr [rbp - 456]
	mov	qword ptr [rdx], 0
	mov	rdx, qword ptr [rbp - 488]
	mov	qword ptr [rbp - 552], rdx
	mov	qword ptr [rbp - 448], r10
	cmp	rcx, 0
	jne	LBB18_2
## BB#1:
	mov	rax, qword ptr [rbp - 504]
	mov	qword ptr [rbp - 496], rax
	jmp	LBB18_29
LBB18_2:
	mov	rax, qword ptr [rbp - 528]
	mov	rcx, qword ptr [rbp - 512]
	sub	rax, rcx
	mov	qword ptr [rbp - 560], rax
	mov	rax, qword ptr [rbp - 536]
	mov	qword ptr [rbp - 344], rax
	mov	rax, qword ptr [rbp - 344]
	mov	rax, qword ptr [rax + 24]
	mov	qword ptr [rbp - 568], rax
	mov	rax, qword ptr [rbp - 568]
	cmp	rax, qword ptr [rbp - 560]
	jle	LBB18_4
## BB#3:
	mov	rax, qword ptr [rbp - 560]
	mov	rcx, qword ptr [rbp - 568]
	sub	rcx, rax
	mov	qword ptr [rbp - 568], rcx
	jmp	LBB18_5
LBB18_4:
	mov	qword ptr [rbp - 568], 0
LBB18_5:
	mov	rax, qword ptr [rbp - 520]
	mov	rcx, qword ptr [rbp - 512]
	sub	rax, rcx
	mov	qword ptr [rbp - 576], rax
	cmp	qword ptr [rbp - 576], 0
	jle	LBB18_9
## BB#6:
	mov	rax, qword ptr [rbp - 504]
	mov	rcx, qword ptr [rbp - 512]
	mov	rdx, qword ptr [rbp - 576]
	mov	qword ptr [rbp - 248], rax
	mov	qword ptr [rbp - 256], rcx
	mov	qword ptr [rbp - 264], rdx
	mov	rax, qword ptr [rbp - 248]
	mov	rcx, qword ptr [rax]
	mov	rcx, qword ptr [rcx + 96]
	mov	rsi, qword ptr [rbp - 256]
	mov	rdx, qword ptr [rbp - 264]
	mov	rdi, rax
	call	rcx
	cmp	rax, qword ptr [rbp - 576]
	je	LBB18_8
## BB#7:
	lea	rax, [rbp - 584]
	lea	rcx, [rbp - 240]
	mov	qword ptr [rbp - 224], rcx
	mov	qword ptr [rbp - 232], -1
	mov	rcx, qword ptr [rbp - 224]
	mov	rdx, qword ptr [rbp - 232]
	mov	qword ptr [rbp - 208], rcx
	mov	qword ptr [rbp - 216], rdx
	mov	rcx, qword ptr [rbp - 208]
	mov	qword ptr [rcx], 0
	mov	rcx, qword ptr [rbp - 240]
	mov	qword ptr [rbp - 584], rcx
	mov	qword ptr [rbp - 8], rax
	mov	qword ptr [rbp - 504], 0
	mov	rax, qword ptr [rbp - 504]
	mov	qword ptr [rbp - 496], rax
	jmp	LBB18_29
LBB18_8:
	jmp	LBB18_9
LBB18_9:
	cmp	qword ptr [rbp - 568], 0
	jle	LBB18_24
## BB#10:
	xor	esi, esi
	mov	eax, 24
	mov	edx, eax
	lea	rcx, [rbp - 608]
	mov	rdi, qword ptr [rbp - 568]
	mov	r8b, byte ptr [rbp - 537]
	mov	qword ptr [rbp - 72], rcx
	mov	qword ptr [rbp - 80], rdi
	mov	byte ptr [rbp - 81], r8b
	mov	rcx, qword ptr [rbp - 72]
	mov	rdi, qword ptr [rbp - 80]
	mov	r8b, byte ptr [rbp - 81]
	mov	qword ptr [rbp - 48], rcx
	mov	qword ptr [rbp - 56], rdi
	mov	byte ptr [rbp - 57], r8b
	mov	rcx, qword ptr [rbp - 48]
	mov	qword ptr [rbp - 40], rcx
	mov	rdi, qword ptr [rbp - 40]
	mov	qword ptr [rbp - 32], rdi
	mov	rdi, qword ptr [rbp - 32]
	mov	qword ptr [rbp - 24], rdi
	mov	rdi, qword ptr [rbp - 24]
	mov	r9, rdi
	mov	qword ptr [rbp - 16], r9
	mov	qword ptr [rbp - 656], rcx ## 8-byte Spill
	call	_memset
	mov	rsi, qword ptr [rbp - 56]
	mov	rdi, qword ptr [rbp - 656] ## 8-byte Reload
	movsx	edx, byte ptr [rbp - 57]
	call	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc
	lea	rcx, [rbp - 608]
	mov	rsi, qword ptr [rbp - 504]
	mov	qword ptr [rbp - 200], rcx
	mov	rcx, qword ptr [rbp - 200]
	mov	qword ptr [rbp - 192], rcx
	mov	rcx, qword ptr [rbp - 192]
	mov	qword ptr [rbp - 184], rcx
	mov	rdi, qword ptr [rbp - 184]
	mov	qword ptr [rbp - 176], rdi
	mov	rdi, qword ptr [rbp - 176]
	mov	qword ptr [rbp - 168], rdi
	mov	rdi, qword ptr [rbp - 168]
	movzx	eax, byte ptr [rdi]
	and	eax, 1
	cmp	eax, 0
	mov	qword ptr [rbp - 664], rsi ## 8-byte Spill
	mov	qword ptr [rbp - 672], rcx ## 8-byte Spill
	je	LBB18_12
## BB#11:
	mov	rax, qword ptr [rbp - 672] ## 8-byte Reload
	mov	qword ptr [rbp - 120], rax
	mov	rcx, qword ptr [rbp - 120]
	mov	qword ptr [rbp - 112], rcx
	mov	rcx, qword ptr [rbp - 112]
	mov	qword ptr [rbp - 104], rcx
	mov	rcx, qword ptr [rbp - 104]
	mov	rcx, qword ptr [rcx + 16]
	mov	qword ptr [rbp - 680], rcx ## 8-byte Spill
	jmp	LBB18_13
LBB18_12:
	mov	rax, qword ptr [rbp - 672] ## 8-byte Reload
	mov	qword ptr [rbp - 160], rax
	mov	rcx, qword ptr [rbp - 160]
	mov	qword ptr [rbp - 152], rcx
	mov	rcx, qword ptr [rbp - 152]
	mov	qword ptr [rbp - 144], rcx
	mov	rcx, qword ptr [rbp - 144]
	add	rcx, 1
	mov	qword ptr [rbp - 136], rcx
	mov	rcx, qword ptr [rbp - 136]
	mov	qword ptr [rbp - 128], rcx
	mov	rcx, qword ptr [rbp - 128]
	mov	qword ptr [rbp - 680], rcx ## 8-byte Spill
LBB18_13:
	mov	rax, qword ptr [rbp - 680] ## 8-byte Reload
	mov	qword ptr [rbp - 96], rax
	mov	rcx, qword ptr [rbp - 568]
	mov	rdx, qword ptr [rbp - 664] ## 8-byte Reload
	mov	qword ptr [rbp - 272], rdx
	mov	qword ptr [rbp - 280], rax
	mov	qword ptr [rbp - 288], rcx
	mov	rax, qword ptr [rbp - 272]
	mov	rsi, qword ptr [rax]
	mov	rsi, qword ptr [rsi + 96]
	mov	rdi, qword ptr [rbp - 280]
Ltmp93:
	mov	qword ptr [rbp - 688], rdi ## 8-byte Spill
	mov	rdi, rax
	mov	rax, qword ptr [rbp - 688] ## 8-byte Reload
	mov	qword ptr [rbp - 696], rsi ## 8-byte Spill
	mov	rsi, rax
	mov	rdx, rcx
	mov	rcx, qword ptr [rbp - 696] ## 8-byte Reload
	call	rcx
Ltmp94:
	mov	qword ptr [rbp - 704], rax ## 8-byte Spill
	jmp	LBB18_14
LBB18_14:
	jmp	LBB18_15
LBB18_15:
	mov	rax, qword ptr [rbp - 704] ## 8-byte Reload
	cmp	rax, qword ptr [rbp - 568]
	je	LBB18_20
## BB#16:
	lea	rax, [rbp - 328]
	mov	qword ptr [rbp - 312], rax
	mov	qword ptr [rbp - 320], -1
	mov	rax, qword ptr [rbp - 312]
	mov	rcx, qword ptr [rbp - 320]
	mov	qword ptr [rbp - 296], rax
	mov	qword ptr [rbp - 304], rcx
	mov	rax, qword ptr [rbp - 296]
	mov	qword ptr [rax], 0
	mov	rax, qword ptr [rbp - 328]
	mov	qword ptr [rbp - 712], rax ## 8-byte Spill
## BB#17:
	lea	rax, [rbp - 632]
	mov	rcx, qword ptr [rbp - 712] ## 8-byte Reload
	mov	qword ptr [rbp - 632], rcx
	mov	qword ptr [rbp - 336], rax
## BB#18:
	mov	qword ptr [rbp - 504], 0
	mov	rax, qword ptr [rbp - 504]
	mov	qword ptr [rbp - 496], rax
	mov	dword ptr [rbp - 636], 1
	jmp	LBB18_21
LBB18_19:
Ltmp95:
	mov	ecx, edx
	mov	qword ptr [rbp - 616], rax
	mov	dword ptr [rbp - 620], ecx
Ltmp96:
	lea	rdi, [rbp - 608]
	call	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
Ltmp97:
	jmp	LBB18_23
LBB18_20:
	mov	dword ptr [rbp - 636], 0
LBB18_21:
	lea	rdi, [rbp - 608]
	call	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	mov	eax, dword ptr [rbp - 636]
	test	eax, eax
	mov	dword ptr [rbp - 716], eax ## 4-byte Spill
	je	LBB18_22
	jmp	LBB18_33
LBB18_33:
	mov	eax, dword ptr [rbp - 716] ## 4-byte Reload
	sub	eax, 1
	mov	dword ptr [rbp - 720], eax ## 4-byte Spill
	je	LBB18_29
	jmp	LBB18_32
LBB18_22:
	jmp	LBB18_24
LBB18_23:
	jmp	LBB18_30
LBB18_24:
	mov	rax, qword ptr [rbp - 528]
	mov	rcx, qword ptr [rbp - 520]
	sub	rax, rcx
	mov	qword ptr [rbp - 576], rax
	cmp	qword ptr [rbp - 576], 0
	jle	LBB18_28
## BB#25:
	mov	rax, qword ptr [rbp - 504]
	mov	rcx, qword ptr [rbp - 520]
	mov	rdx, qword ptr [rbp - 576]
	mov	qword ptr [rbp - 352], rax
	mov	qword ptr [rbp - 360], rcx
	mov	qword ptr [rbp - 368], rdx
	mov	rax, qword ptr [rbp - 352]
	mov	rcx, qword ptr [rax]
	mov	rcx, qword ptr [rcx + 96]
	mov	rsi, qword ptr [rbp - 360]
	mov	rdx, qword ptr [rbp - 368]
	mov	rdi, rax
	call	rcx
	cmp	rax, qword ptr [rbp - 576]
	je	LBB18_27
## BB#26:
	lea	rax, [rbp - 648]
	lea	rcx, [rbp - 408]
	mov	qword ptr [rbp - 392], rcx
	mov	qword ptr [rbp - 400], -1
	mov	rcx, qword ptr [rbp - 392]
	mov	rdx, qword ptr [rbp - 400]
	mov	qword ptr [rbp - 376], rcx
	mov	qword ptr [rbp - 384], rdx
	mov	rcx, qword ptr [rbp - 376]
	mov	qword ptr [rcx], 0
	mov	rcx, qword ptr [rbp - 408]
	mov	qword ptr [rbp - 648], rcx
	mov	qword ptr [rbp - 416], rax
	mov	qword ptr [rbp - 504], 0
	mov	rax, qword ptr [rbp - 504]
	mov	qword ptr [rbp - 496], rax
	jmp	LBB18_29
LBB18_27:
	jmp	LBB18_28
LBB18_28:
	mov	rax, qword ptr [rbp - 536]
	mov	qword ptr [rbp - 424], rax
	mov	qword ptr [rbp - 432], 0
	mov	rax, qword ptr [rbp - 424]
	mov	rcx, qword ptr [rax + 24]
	mov	qword ptr [rbp - 440], rcx
	mov	rcx, qword ptr [rbp - 432]
	mov	qword ptr [rax + 24], rcx
	mov	rax, qword ptr [rbp - 504]
	mov	qword ptr [rbp - 496], rax
LBB18_29:
	mov	rax, qword ptr [rbp - 496]
	add	rsp, 736
	pop	rbp
	ret
LBB18_30:
	mov	rdi, qword ptr [rbp - 616]
	call	__Unwind_Resume
LBB18_31:
Ltmp98:
	mov	ecx, edx
	mov	rdi, rax
	mov	dword ptr [rbp - 724], ecx ## 4-byte Spill
	call	___clang_call_terminate
LBB18_32:
Lfunc_end5:
	.cfi_endproc
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table18:
Lexception5:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\274"                  ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	52                      ## Call site table length
Lset66 = Lfunc_begin5-Lfunc_begin5      ## >> Call Site 1 <<
	.long	Lset66
Lset67 = Ltmp93-Lfunc_begin5            ##   Call between Lfunc_begin5 and Ltmp93
	.long	Lset67
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset68 = Ltmp93-Lfunc_begin5            ## >> Call Site 2 <<
	.long	Lset68
Lset69 = Ltmp94-Ltmp93                  ##   Call between Ltmp93 and Ltmp94
	.long	Lset69
Lset70 = Ltmp95-Lfunc_begin5            ##     jumps to Ltmp95
	.long	Lset70
	.byte	0                       ##   On action: cleanup
Lset71 = Ltmp96-Lfunc_begin5            ## >> Call Site 3 <<
	.long	Lset71
Lset72 = Ltmp97-Ltmp96                  ##   Call between Ltmp96 and Ltmp97
	.long	Lset72
Lset73 = Ltmp98-Lfunc_begin5            ##     jumps to Ltmp98
	.long	Lset73
	.byte	1                       ##   On action: 1
Lset74 = Ltmp97-Lfunc_begin5            ## >> Call Site 4 <<
	.long	Lset74
Lset75 = Lfunc_end5-Ltmp97              ##   Call between Ltmp97 and Lfunc_end5
	.long	Lset75
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZNSt3__111char_traitsIcE11eq_int_typeEii
	.weak_def_can_be_hidden	__ZNSt3__111char_traitsIcE11eq_int_typeEii
	.align	4, 0x90
__ZNSt3__111char_traitsIcE11eq_int_typeEii: ## @_ZNSt3__111char_traitsIcE11eq_int_typeEii
## BB#0:
	push	rbp
	mov	rbp, rsp
	mov	dword ptr [rbp - 4], edi
	mov	dword ptr [rbp - 8], esi
	mov	esi, dword ptr [rbp - 4]
	cmp	esi, dword ptr [rbp - 8]
	sete	al
	and	al, 1
	movzx	eax, al
	pop	rbp
	ret

	.globl	__ZNSt3__111char_traitsIcE3eofEv
	.weak_def_can_be_hidden	__ZNSt3__111char_traitsIcE3eofEv
	.align	4, 0x90
__ZNSt3__111char_traitsIcE3eofEv:       ## @_ZNSt3__111char_traitsIcE3eofEv
## BB#0:
	push	rbp
	mov	rbp, rsp
	mov	eax, 4294967295
	pop	rbp
	ret

	.globl	__ZN8EngineerC2Ev
	.weak_def_can_be_hidden	__ZN8EngineerC2Ev
	.align	4, 0x90
__ZN8EngineerC2Ev:                      ## @_ZN8EngineerC2Ev
## BB#0:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	qword ptr [rbp - 8], rdi
	mov	rdi, qword ptr [rbp - 8]
	mov	rax, rdi
	mov	qword ptr [rbp - 16], rdi ## 8-byte Spill
	mov	rdi, rax
	call	__ZN6PersonC2Ev
	mov	rax, qword ptr [rip + __ZTV8Engineer@GOTPCREL]
	add	rax, 16
	mov	rdi, qword ptr [rbp - 16] ## 8-byte Reload
	mov	qword ptr [rdi], rax
	add	rsp, 16
	pop	rbp
	ret

	.globl	__ZNK8Engineer1fEv
	.weak_def_can_be_hidden	__ZNK8Engineer1fEv
	.align	4, 0x90
__ZNK8Engineer1fEv:                     ## @_ZNK8Engineer1fEv
	.cfi_startproc
## BB#0:
	push	rbp
Ltmp102:
	.cfi_def_cfa_offset 16
Ltmp103:
	.cfi_offset rbp, -16
	mov	rbp, rsp
Ltmp104:
	.cfi_def_cfa_register rbp
	sub	rsp, 32
	mov	rax, qword ptr [rip + __ZNSt3__14coutE@GOTPCREL]
	lea	rsi, [rip + L_.str.2]
	mov	qword ptr [rbp - 24], rdi
	mov	rdi, rax
	call	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	lea	rsi, [rip + __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_]
	mov	qword ptr [rbp - 8], rax
	mov	qword ptr [rbp - 16], rsi
	mov	rdi, qword ptr [rbp - 8]
	call	qword ptr [rbp - 16]
	mov	qword ptr [rbp - 32], rax ## 8-byte Spill
	add	rsp, 32
	pop	rbp
	ret
	.cfi_endproc

	.globl	__ZNK8Engineer1qEv
	.weak_def_can_be_hidden	__ZNK8Engineer1qEv
	.align	4, 0x90
__ZNK8Engineer1qEv:                     ## @_ZNK8Engineer1qEv
	.cfi_startproc
## BB#0:
	push	rbp
Ltmp105:
	.cfi_def_cfa_offset 16
Ltmp106:
	.cfi_offset rbp, -16
	mov	rbp, rsp
Ltmp107:
	.cfi_def_cfa_register rbp
	sub	rsp, 32
	mov	rax, qword ptr [rip + __ZNSt3__14coutE@GOTPCREL]
	lea	rsi, [rip + L_.str.1]
	mov	qword ptr [rbp - 24], rdi
	mov	rdi, rax
	call	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	lea	rsi, [rip + __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_]
	mov	qword ptr [rbp - 8], rax
	mov	qword ptr [rbp - 16], rsi
	mov	rdi, qword ptr [rbp - 8]
	call	qword ptr [rbp - 16]
	mov	qword ptr [rbp - 32], rax ## 8-byte Spill
	add	rsp, 32
	pop	rbp
	ret
	.cfi_endproc

	.globl	__ZN8EngineerD0Ev
	.weak_def_can_be_hidden	__ZN8EngineerD0Ev
	.align	4, 0x90
__ZN8EngineerD0Ev:                      ## @_ZN8EngineerD0Ev
Lfunc_begin6:
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
	.cfi_lsda 16, Lexception6
## BB#0:
	push	rbp
Ltmp111:
	.cfi_def_cfa_offset 16
Ltmp112:
	.cfi_offset rbp, -16
	mov	rbp, rsp
Ltmp113:
	.cfi_def_cfa_register rbp
	sub	rsp, 32
	mov	qword ptr [rbp - 8], rdi
	mov	rax, rdi
Ltmp108:
	mov	qword ptr [rbp - 32], rax ## 8-byte Spill
	call	__ZN8EngineerD1Ev
Ltmp109:
	jmp	LBB24_1
LBB24_1:
	mov	rax, qword ptr [rbp - 32] ## 8-byte Reload
	mov	rdi, rax
	call	__ZdlPv
	add	rsp, 32
	pop	rbp
	ret
LBB24_2:
Ltmp110:
	mov	ecx, edx
	mov	qword ptr [rbp - 16], rax
	mov	dword ptr [rbp - 20], ecx
	mov	rax, qword ptr [rbp - 32] ## 8-byte Reload
	mov	rdi, rax
	call	__ZdlPv
## BB#3:
	mov	rdi, qword ptr [rbp - 16]
	call	__Unwind_Resume
Lfunc_end6:
	.cfi_endproc
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table24:
Lexception6:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\234"                  ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	26                      ## Call site table length
Lset76 = Ltmp108-Lfunc_begin6           ## >> Call Site 1 <<
	.long	Lset76
Lset77 = Ltmp109-Ltmp108                ##   Call between Ltmp108 and Ltmp109
	.long	Lset77
Lset78 = Ltmp110-Lfunc_begin6           ##     jumps to Ltmp110
	.long	Lset78
	.byte	0                       ##   On action: cleanup
Lset79 = Ltmp109-Lfunc_begin6           ## >> Call Site 2 <<
	.long	Lset79
Lset80 = Lfunc_end6-Ltmp109             ##   Call between Ltmp109 and Lfunc_end6
	.long	Lset80
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN8EngineerD2Ev
	.weak_def_can_be_hidden	__ZN8EngineerD2Ev
	.align	4, 0x90
__ZN8EngineerD2Ev:                      ## @_ZN8EngineerD2Ev
## BB#0:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	qword ptr [rbp - 8], rdi
	mov	rdi, qword ptr [rbp - 8]
	call	__ZN6PersonD2Ev
	add	rsp, 16
	pop	rbp
	ret

	.globl	__ZN7StudentD2Ev
	.weak_def_can_be_hidden	__ZN7StudentD2Ev
	.align	4, 0x90
__ZN7StudentD2Ev:                       ## @_ZN7StudentD2Ev
## BB#0:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	qword ptr [rbp - 8], rdi
	mov	rdi, qword ptr [rbp - 8]
	call	__ZN6PersonD2Ev
	add	rsp, 16
	pop	rbp
	ret

	.section	__DATA,__data
	.globl	__ZTV7Student           ## @_ZTV7Student
	.weak_def_can_be_hidden	__ZTV7Student
	.align	3
__ZTV7Student:
	.quad	0
	.quad	__ZTI7Student
	.quad	__ZNK7Student1fEv
	.quad	__ZNK7Student1qEv
	.quad	__ZN7StudentD1Ev
	.quad	__ZN7StudentD0Ev

	.section	__TEXT,__const
	.globl	__ZTS7Student           ## @_ZTS7Student
	.weak_definition	__ZTS7Student
__ZTS7Student:
	.asciz	"7Student"

	.globl	__ZTS6Person            ## @_ZTS6Person
	.weak_definition	__ZTS6Person
__ZTS6Person:
	.asciz	"6Person"

	.section	__DATA,__data
	.globl	__ZTI6Person            ## @_ZTI6Person
	.weak_definition	__ZTI6Person
	.align	3
__ZTI6Person:
	.quad	__ZTVN10__cxxabiv117__class_type_infoE+16
	.quad	__ZTS6Person

	.globl	__ZTI7Student           ## @_ZTI7Student
	.weak_definition	__ZTI7Student
	.align	4
__ZTI7Student:
	.quad	__ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	__ZTS7Student
	.quad	__ZTI6Person

	.globl	__ZTV6Person            ## @_ZTV6Person
	.weak_def_can_be_hidden	__ZTV6Person
	.align	3
__ZTV6Person:
	.quad	0
	.quad	__ZTI6Person
	.quad	___cxa_pure_virtual
	.quad	___cxa_pure_virtual
	.quad	__ZN6PersonD1Ev
	.quad	__ZN6PersonD0Ev

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"A::f()"

L_.str.1:                               ## @.str.1
	.asciz	"A::q()"

	.section	__DATA,__data
	.globl	__ZTV8Engineer          ## @_ZTV8Engineer
	.weak_def_can_be_hidden	__ZTV8Engineer
	.align	3
__ZTV8Engineer:
	.quad	0
	.quad	__ZTI8Engineer
	.quad	__ZNK8Engineer1fEv
	.quad	__ZNK8Engineer1qEv
	.quad	__ZN8EngineerD1Ev
	.quad	__ZN8EngineerD0Ev

	.section	__TEXT,__const
	.globl	__ZTS8Engineer          ## @_ZTS8Engineer
	.weak_definition	__ZTS8Engineer
__ZTS8Engineer:
	.asciz	"8Engineer"

	.section	__DATA,__data
	.globl	__ZTI8Engineer          ## @_ZTI8Engineer
	.weak_definition	__ZTI8Engineer
	.align	4
__ZTI8Engineer:
	.quad	__ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	__ZTS8Engineer
	.quad	__ZTI6Person

	.section	__TEXT,__cstring,cstring_literals
L_.str.2:                               ## @.str.2
	.asciz	"B::f()"


.subsections_via_symbols
